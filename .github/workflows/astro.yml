# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Write file
        env:
          # Add new env var if .env file was changed
          CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_DELIVERY_TOKEN: ${{ secrets.CONTENTFUL_DELIVERY_TOKEN }}
          CONTENTFUL_PREVIEW_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_TOKEN }}
          # not forget to update `run` command to write new env var in .env file
        run: |
          echo "CONTENTFUL_SPACE_ID=${{ env.CONTENTFUL_SPACE_ID }}" > .env
          echo "CONTENTFUL_DELIVERY_TOKEN=${{ env.CONTENTFUL_DELIVERY_TOKEN }}" >> .env
          echo "CONTENTFUL_PREVIEW_TOKEN=${{ env.CONTENTFUL_PREVIEW_TOKEN }}" >> .env
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      - name: Install dependencies
        run: npm i
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: npm run build
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload dist artifact
        working-directory: ${{ env.BUILD_PATH }}
        env:
          GH_PAT: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "Eugen263"
          git config --global user.email "kupulenko29@gmail.com"
          git remote add pages https://$GH_PAT@github.com/${{ github.repository }}
          git checkout -b pages  # Adjust this to your new branch name
      - name: Copy dist files to new branch
        working-directory: ${{ env.BUILD_PATH }}
        run: |
          git checkout pages
          git rm -rf .
          cp -r dist/* .
          git add .
          git commit -m "Deploy dist files to new branch"
      - name: Push new branch
        working-directory: ${{ env.BUILD_PATH }}
        env:
          GH_PAT: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "Eugen263"
          git config --global user.email "kupulenko29@gmail.com"
          git remote add pages https://$GH_PAT@github.com/${{ github.repository }}
          git push pages pages --force
