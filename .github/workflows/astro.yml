# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Write file
        env:
          ENV: ${{ secrets.ENV }}
        run: echo $ENV > .env
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      # - name: Setup Pages
      #   id: pages
      #   uses: actions/configure-pages@v5
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}
      # - name: Upload dist artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dist-folder
      #     path: ${{ env.BUILD_PATH }}/dist
      - name: folder list
        working-directory: ${{ env.BUILD_PATH }}
        run: ls -la
      - name: Create new branch
        working-directory: ${{ env.BUILD_PATH }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b pages  # Adjust this to your new branch name
      - name: Copy dist files to new branch
        working-directory: ${{ env.BUILD_PATH }}
        run: |
          git rm -rf .
          cp -r dist/* .
          git add .
          git commit -m "Deploy artifacts"
      - name: Push new branch
        working-directory: ${{ env.BUILD_PATH }}
        run: git push origin pages --force

  # deploy:
  #   environment:
  #     name: github-pages
  #   needs: build
  #   runs-on: ubuntu-latest
  #   name: Deploy
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Create new branch
  #       working-directory: ${{ env.BUILD_PATH }}
  #       run: |
  #         git config --global user.name "github-actions[bot]"
  #         git config --global user.email "github-actions[bot]@users.noreply.github.com"
  #         git checkout -b pages  # Adjust this to your new branch name
  #     - name: Copy dist files to new branch
  #       working-directory: ${{ env.BUILD_PATH }}
  #       run: |
  #         git checkout pages
  #         git rm -rf .
  #         cp -r dist/* .
  #         git add .
  #         git commit -m "Deploy dist files to new branch"
  #     - name: Push new branch
  #       working-directory: ${{ env.BUILD_PATH }}
  #       run: git push origin pages --force
