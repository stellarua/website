---
import Arrow from "./Arrow.astro";
import ReviewCard from "./ReviewCard.astro";
import { getStaticPaths } from "../contentful/reviews";
import {type Testimonials} from '../contentful/types'
import "swiper/css/bundle";
import "../styles/reviewsSlider.css";


const {lang} = Astro.params;
const currentLang = lang || 'en-US';

const {buttons} = Astro.props

const { paths } = await getStaticPaths();

const reviewsArr: Testimonials['fields'][] = paths
  .filter((path) => path.params.locale === currentLang)
  .map((path) => path.props.review);
  
---

<div class="reviews-wrapper">
    <div class="reviews-controls container">
        <div class="reviews-filter">
            {buttons.map((entry:any) => <button class="btn reviews-filter__btn">{entry}</button>)}
        </div>
        <div class="su-slider__arrows reviews-arrows">
            <button class="btn su-slider__arrow reviews__arrow prev">
                <Arrow />
            </button>
            <button class="btn su-slider__arrow reviews__arrow next">
                <Arrow />
            </button>
        </div>
    </div>
    <div id="reviewsSlider" class="swiper">
        <div class="swiper-wrapper">
            {
                reviewsArr.map((card, index) => {
                    const { userName, companyName, userAvatar, filterTag, testimonials } = card;
                    const avatar = userAvatar?.fields?.file?.url || '';
                    return (
                    <ReviewCard
                        name={userName}
                        company={companyName}
                        avatar={avatar}
                        review={testimonials}
                        filterTag={filterTag}
                    />
                )
                })
            }
        </div>
    </div>
</div>

<style>
    .reviews-filter {
        display: flex;
        gap:3px
    }
    @media (max-width: 768px) {
        .reviews-filter {
            display: block;
        }
    }
</style>

<script type="module">
    import Swiper from 'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.mjs';
    var nswiper = new Swiper("#reviewsSlider", {
    slidesPerView: 1,
    grid: {
        rows: 3,
        fill: "row",
    },
    spaceBetween: 30,
    navigation: {
        nextEl: ".reviews__arrow.next",
        prevEl: ".reviews__arrow.prev",
    },
    breakpoints: {
        768: {
            slidesPerView: 2,
            grid: {
                rows: 2,
                fill: "row",
            },
            spaceBetween: 60,
        },
    },
});

document.addEventListener("click", reviewsFiltering);

function reviewsFiltering(e) {
    const button = e.target.closest(".reviews-filter__btn");
    const filterBtns = document.querySelectorAll(".reviews-filter__btn");
    const reviews = document.querySelectorAll(".review-card");
    if (button) {
        // const filterTag = button.textContent.toLowerCase();
        let filterActive = new Array();
        button.classList.contains("active") ? button.classList.remove("active"): button.classList.add("active");
        filterBtns.forEach(function (btn) {
            btn.classList.contains("active") ? filterActive.push(btn.textContent.toLowerCase()): '';                
        });

        if (filterActive.length == 0) {
            reviews.forEach(function (review) {
                review.classList.remove("non-swiper-slide");
                review.classList.add("swiper-slide");
            });

            nswiper.destroy();
            nswiper = new Swiper("#reviewsSlider", {
                slidesPerView: 1,
                grid: {
                    rows: 3,
                    fill: "row",
                },
                spaceBetween: 30,
                navigation: {
                    nextEl: ".reviews__arrow.next",
                    prevEl: ".reviews__arrow.prev",
                },
                breakpoints: {
                    768: {
                        slidesPerView: 2,
                        grid: {
                            rows: 2,
                            fill: "row",
                        },
                        spaceBetween: 60,
                    },
                },
            });
        } else {
            reviews.forEach(function (review) {
                if (filterActive.indexOf(review.getAttribute("data-filter")) !== -1) {
                    review.classList.remove("non-swiper-slide");
                    review.classList.add("swiper-slide");
                } else {
                    review.classList.add("non-swiper-slide");
                    review.classList.remove("swiper-slide");
                }
            });
            nswiper.destroy();
            nswiper = new Swiper("#reviewsSlider", {
                slidesPerView: 1,
                grid: {
                    rows: 3,
                    fill: "row",
                },
                spaceBetween: 30,
                navigation: {
                    nextEl: ".reviews__arrow.next",
                    prevEl: ".reviews__arrow.prev",
                },
                breakpoints: {
                    768: {
                        slidesPerView: 2,
                        grid: {
                            rows: 2,
                            fill: "row",
                        },
                        spaceBetween: 60,
                    },
                },
            });
        }
    }
}
</script>
